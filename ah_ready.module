<?php

module_load_include('php', 'acquiasdk', 'vendor/autoload.php');
use Acquia\Cloud\Api\CloudApiClient;

define("CLOUD_ENV", "prod");

/**
 * Implements hook_menu.
 */
function ah_ready_menu() {
  $items = array();
  $items['admin/config/system/ah-ready'] = array(
    'title' => 'AH Ready settings',
    'description' => 'Verify your site is ready for Acquia Cloud.',
    'page callback' => 'ah_ready_settings_page',
    'file' => 'ah_ready.pages.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/ah-ready/cloudapi'] = array(
    'title' => 'Acquia Cloud API',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array(4),
  );
  $items['admin/config/system/ah-ready/site'] = array(
    'title' => 'Network Subscription',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array(4),
  );
  $items['admin/config/system/ah-ready/domains'] = array(
    'title' => 'AH Ready Domains',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(4),
  );
  $items['admin/ah_ready/domains/autocomplete'] = array(
    'title' => 'Autocomplete for domains',
    'page callback' => '_ah_ready_domains_autocomplete',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function in_array_r($needle, $haystack) {
  foreach ($haystack as $item) {
    if (($item == $needle) || (is_array($item) && in_array_r($needle, $item))) {
      return true;
    }
  }

  return false;
}

function _ah_ready_domains_autocomplete($domains_typed = '') {
  $cloudapi = ah_ready_cloudapi_connect();
  $site = variable_get('ah_ready_cloudapi_site', '');
  if (!empty($cloudapi) && !empty($site)) {
    $domains_typed = drupal_explode_tags($domains_typed);
    $domain_last = drupal_strtolower(array_pop($domains_typed));

    $domains_return = array();
    $domain_matches = array();
    if ($domain_last != '') {
      foreach($cloudapi->domains($site, CLOUD_ENV) as $domain) {
        if (preg_match("/$domain_last/", $domain) && !in_array($domain, $domains_typed)) {
          $domains_return[] = $domain['name'];
        }
      }

      $prefix = count($domains_typed) ? drupal_implode_tags($domains_typed) . ', ' : '';

      foreach ($domains_return as $name) {
        $n = $name;
        if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
          $n = '"' . str_replace('"', '""', $name) . '"';
        }
        $domain_matches[$prefix . $n] = check_plain($name);
      }
    }

    drupal_json_output($domain_matches);
  } else {
    drupal_json_output('');
  }
}

function ah_ready_cloudapi_connect() {
  $ah_ready_user = variable_get('ah_ready_cloudapi_username', '');
  $ah_ready_password = decrypt(variable_get('ah_ready_cloudapi_password', ''));

  if (!empty($ah_ready_user) && !empty($ah_ready_password)) {
    $cloudapi = CloudApiClient::factory(array(
      'username' => $ah_ready_user,
      'password' => $ah_ready_password,
    ));
  } else {
    $cloudapi = '';
  }
  
  return $cloudapi;
}

function ah_ready_cloudapi_sites($choose = false) {
  $cloudapi = ah_ready_cloudapi_connect();

  if (!empty($cloudapi)) {
    $sites = $cloudapi->sites();
    if ($choose) {
      $exists = variable_get('ah_ready_cloudapi_site', '');
      if (empty($exists)) {
        $sub_data = variable_get('acquia_subscription_data', '');
        if (!empty($sub_data)) {
          foreach ($sites as $site) {
            if ($cloudapi->site($site['name'])->uuid() == $sub_data['uuid']) {
              variable_set('ah_ready_cloudapi_site', $site['name']);
            }
          }
        }
      }
    } else {
      $site_list = array();
      foreach ($sites as $site) {
        $site_list[] = $site['name'];
      }

      return drupal_map_assoc($site_list);
    }
  } else {
    return drupal_map_assoc(array(t('No options available')));
  }
}

function ah_ready_ssl_domain($domain) {
  $depth = substr_count($domain, '.');
  $urls = array();
  $urls[] = $domain;
  if ($depth > 1) {
    $urls[] = preg_replace("/^[a-zA-Z0-9\-]+\./", "*.", $domain);
  }

  return $urls;
}

/**
 * Evaluate characteristics of a module.
 *
 * @param string $module_name
 *  The name of the module to evaluate.
 *
 * @return boolean
 *  true if the module passed all checks.
 *
 */
function ah_ready_module_check($module_name) {

  $result = true;

  $failed[] = module_exists($module_name);

  if (in_array(true, $failed)) {
    $result = false;
  }

  return $result;
}

function ah_ready_concurrency_check($modules = array()) {

  $num = count($modules);
  $present = array();
  foreach ($modules as $module) {
    if (!ah_ready_module_check($module)) {
      $present[$module] = 1;
    }
  }

  if (count($present) < $num) {
    $result = true;
  } else {
    $result = false;
  }

  return $result;
}

function ah_ready_dependency_check($modules = array(), $dependencies = array()) {

  $result = true;

  if (!ah_ready_concurrency_check($modules)) {
    $result = !ah_ready_concurrency_check($dependencies);
  }

  return $result;
}

function ah_ready_variable_check($module, $variable, $value, $match = true) {

  $result = true;

  if (!ah_ready_module_check($module)) {
    $var = variable_get($variable);
    if ($match) {
      if (!preg_match($value, $var)) {
        $result = false;
      }
    } else {
      if (preg_match($value, $var)) {
        $result = false;
      }
    }
  }

  return $result;
}

function ah_ready_domain_check($domains) {

  $result = true;

  $site = variable_get('ah_ready_cloudapi_site', '');
  $cloudapi = ah_ready_cloudapi_connect();

  if (!empty($cloudapi) && !empty($site)) {
    foreach ($domains as $domain) {
      try {
        $cloud_domain = $cloudapi->domain($site, CLOUD_ENV, $domain);
      } catch (Guzzle\Http\Exception\BadResponseException $e) {
        if (isset($e)) {
          $result = false;
          break;
        }
      }
    }
  }

  return $result;
}

function ah_ready_ssl_check($domains) {

  $result = true;

  $site = variable_get('ah_ready_cloudapi_site', '');
  $cloudapi = ah_ready_cloudapi_connect();
  if (!empty($cloudapi) && !empty($site)) {
    $servers = $cloudapi->servers($site, CLOUD_ENV);
    $bals = array();
    foreach ($servers as $server) {
      if (isset($server['services']['varnish'])) {
        if ($server['services']['varnish']['status'] == 'active') {
          $bals[] = $server['fqdn'];
          if (isset($server['services']['elb_domain_name'])) {
            $bals[] = $server['services']['elb_domain_name'];
          }
        }
      }
    }
    $covered = array();
    foreach ($bals as $bal) {
      $get = stream_context_create(array("ssl" => array("capture_peer_cert" => TRUE)));
      $read = stream_socket_client("ssl://$bal:443", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $get);
      $cert = stream_context_get_params($read);
      $data = openssl_x509_parse($cert["options"]["ssl"]["peer_certificate"]);
      $covered[$bal] = str_replace("DNS:", '', explode(",", $data['extensions']['subjectAltName']));
    }
    $domain_pool = array();
    foreach ($domains as $domain) {
      $urls = ah_ready_ssl_domain($domain);
      foreach ($urls as $url) {
        if (in_array_r($url, $covered)) {
          $domain_pool[$domain] = true;
          break;
        } else {
          $domain_pool[$domain] = false;
        }
      }
    }
    foreach ($domain_pool as $item) {
      if (!$item) {
        $result = false;
        break;
      }
    }
  }

  return $result;
}

/**
 * Implements hook_acquia_spi_test().
 */
function ah_ready_acquia_spi_test() {
  $cloud_user = variable_get('ah_ready_cloudapi_username', '');
  $cloud_pass = variable_get('ah_ready_cloudapi_password', '');
  $cloud_site = variable_get('ah_ready_cloudapi_site', '');
  $domains = explode(',', variable_get('ah_ready_domains', ''));

  $cloud_tests = true;
  if (empty($cloud_user) || empty($cloud_pass)) {
    if (empty($cloud_site) || empty($domains)) {
      $cloud_tests = false;
    }
  }
  $fileconveyor_var = "/advanced/";
  if (isset($_ENV['AH_SITE_GROUP'])) {
    $plupload_var = "@^/mnt/(gfs|files)/{$_ENV['AH_SITE_GROUP']}((\.)?{$_ENV['AH_SITE_ENVIRONMENT']})?/tmp$@";
  } else {
    $plupload_var = "/.*?/";
  }

  return array(
    'adaptive_image_enabled_check' => array(
      'description'    => 'Adaptive Image causes all visitors to see the image as it was rendered for the device associated with the first page load after a cache clear.',
      'solved_message' => 'Adaptive Image module is disabled',
      'failed_message' => 'Adaptive Image module is enabled',
      'solved'         => ah_ready_module_check('adaptive_image'),
      'fix_details'    => 'Disable the Adaptive Image module and re-architect responsive images to work with Varnish caching.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'apc_enabled_check' => array(
      'description'    => 'Alternative PHP Cache stores data per-server, and use of the APC module can lead to divergence in cache data.',
      'solved_message' => 'APC module is disabled',
      'failed_message' => 'APC module is enabled',
      'solved'         => ah_ready_module_check('apc'),
      'fix_details'    => 'Disable the APC module so that Acquia\'s Opcode Cache can perform to it\'s fullest.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'backup_migrate_enabled_check' => array(
      'description'    => 'Backup Migrate causes many performance issues on Acquia Cloud. For more details see our documentation: https://docs.acquia.com/articles/backup-and-migrate-module-acquia-hosted-sites',
      'solved_message' => 'Backup Migrate module is disabled',
      'failed_message' => 'Backup Migrate module is enabled',
      'solved'         => ah_ready_module_check('backup_migrate'),
      'fix_details'    => 'Disable the Backup Migrate module and convert to a backup strategy in the following documentation: https://docs.acquia.com/articles/backup-and-migrate-module-acquia-hosted-sites.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'boost_enabled_check' => array(
      'description'    => 'Boost creates many disk writes, which can cause problems on shared servers. On Acquia Hosting, it is also superceded by Varnish. For more details see our documentation: https://docs.acquia.com/articles/boost-acquia-cloud',
      'solved_message' => 'Boost module is disabled',
      'failed_message' => 'Boost module is enabled',
      'solved'         => ah_ready_module_check('boost'),
      'fix_details'    => 'Disable the Boost module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'cas_enabled_check' => array(
      'description'    => 'CAS requires session cookies to be set, which prevents Varnish from caching pages.',
      'solved_message' => 'CAS is disabled',
      'failed_message' => 'CAS is enabled',
      'solved'         => ah_ready_module_check('cas'),
      'fix_details'    => 'Disable the CAS module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'contact_importer_enabled_check' => array(
      'description'    => 'Contact Importer is dependent on Open Inviter. To use this module, it is strongly recommended to create a symlink to private files. For more information see: https://docs.acquia.com/cloud/files',
      'solved_message' => 'Contact Importer is disabled',
      'failed_message' => 'Contact Importer is enabled',
      'solved'         => ah_ready_module_check('contact_importer'),
      'fix_details'    => 'Disable Contact Importer or ensure proper configuration.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'db_maintenance_enabled_check' => array(
      'description'    => 'Using this module improperly can potentially cause slowdowns or outages. If you feel your site has tables that need optimizing, open a ticket with support.',
      'solved_message' => 'DB Maintenance is disabled',
      'failed_message' => 'DB Maintenance is enabled',
      'solved'         => ah_ready_module_check('db_maintenance'),
      'fix_details'    => 'Disable DB Maintenance or open a support ticket for optimization assistance.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'elysia_cron_enabled_check' => array(
      'description'    => 'Elysia Cron is not incompatible, but requires careful setup. Poor implementations of this module can cause severe performance problems. For more details see: https://docs.acquia.com/articles/elysia-cron-acquia-cloud',
      'solved_message' => 'Elysia Cron is disabled',
      'failed_message' => 'Elysia Cron is enabled',
      'solved'         => ah_ready_module_check('elysia_cron'),
      'fix_details'    => 'Ensure that Elysia Cron is configured properly.',
      'category'       => 'performance',
      'severity'       => 16,
    ),
    'fbconnect_enabled_check' => array(
      'description'    => 'Facebook Connect requires session cookies to be set,, which prevents Varnish from caching pages.',
      'solved_message' => 'Facebook Connect is disabled',
      'failed_message' => 'Facebook Connect is enabled',
      'solved'         => ah_ready_module_check('fbconnect'),
      'fix_details'    => 'Disable the Facebook Connect module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'filecache_enabled_check' => array(
      'description'    => 'File Cache moves caching to Gluster, which can cause server load to spike in association with file system activity.',
      'solved_message' => 'File Cache is disabled',
      'failed_message' => 'File Cache is enabled',
      'solved'         => ah_ready_module_check('filecache'),
      'fix_details'    => 'Disable the File Cache module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'fileconveyor_enabled_check' => array(
      'description'    => 'GlusterFS does not support inotify, which is a requirement when using the CDN module in File Conveyor mode. Origin Pull mode should be used on Acquia Cloud.',
      'solved_message' => 'The CDN module is not configured to use File Conveyor mode',
      'failed_message' => 'The CDN module is configured to use File Conveyor mode',
      'solved'         => ah_ready_variable_check('cdn', 'cdn_mode', $fileconveyor_var, false),
      'fix_details'    => 'Switch CDN configuration from File Conveyor mode to Origin Pull mode.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'fivestar_enabled_check' => array(
      'description'    => 'When used with Anonymous user voting, the Fivestar module can create significant amounts of data in the cache_form table.',
      'solved_message' => 'Fivestar is disabled',
      'failed_message' => 'Fivestar is enabled',
      'solved'         => ah_ready_module_check('fivestar'),
      'fix_details'    => 'Disable or patch the Fivestar module (https://drupal.org/node/1512568), or disallow Anonymous users the ability to vote.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'hierarchical_select_enabled_check' => array(
      'description'    => 'Hierarchical Select requires session cookies to be set, which prevents Varnish from caching pages.',
      'solved_message' => 'Hierarchical Select is disabled',
      'failed_message' => 'Hierarchical Select is enabled',
      'solved'         => ah_ready_module_check('hierarchical_select'),
      'fix_details'    => 'Disable the Hierarchical Select module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'htmlpurifier_enabled_check' => array(
      'description'    => 'HTML Purifier should be configured with a symlink to private files.',
      'solved_message' => 'HTML Purifier is disabled',
      'failed_message' => 'HTML Purifier is enabled',
      'solved'         => ah_ready_module_check('htmlpurifier'),
      'fix_details'    => 'Configure HTML Purifier to utilize private files via symlink.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'imagefield_crop_enabled_check' => array(
      'description'    => 'Imagefield Crop adds lots of data to the Variables table, and can cause problems with memory consumption.',
      'solved_message' => 'Imagefield Crop is disabled',
      'failed_message' => 'Imagefield Crop is enabled',
      'solved'         => ah_ready_module_check('imagefield_crop'),
      'fix_details'    => 'Disable the Imagefield Crop module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'ip_geoloc_enabled_check' => array(
      'description'    => 'IP Geolocation Views and Maps requires session cookies to be set, which prevents Varnish from caching pages.',
      'solved_message' => 'IP Geolocation Views and Maps is disabled',
      'failed_message' => 'IP Geolocation Views and Maps is enabled',
      'solved'         => ah_ready_module_check('ip_geoloc'),
      'fix_details'    => 'Disable the IP Geolocation Views and Maps module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'ldap_enabled_check' => array(
      'description'    => 'LDAP alone without SSO can work on Acquia Cloud. SSO requires NTLM (NT LAN Manager) support, which is an Apache module that Acquia does not currently support.',
      'solved_message' => 'LDAP is disabled',
      'failed_message' => 'LDAP is enabled',
      'solved'         => ah_ready_module_check('ldap'),
      'fix_details'    => 'Disable the LDAP module or disable LDAP SSO.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'linkchecker_enabled_check' => array(
      'description'    => 'Link Checker can cause timeouts during cron runs.',
      'solved_message' => 'Link Checker is disabled',
      'failed_message' => 'Link Checker is enabled',
      'solved'         => ah_ready_module_check('linkchecker'),
      'fix_details'    => 'Disable the Link Checker module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'pubdlcnt_enabled_check' => array(
      'description'    => 'Public Download Count prevents Varnish from caching pages. Google Analytics is a good replacement option.',
      'solved_message' => 'Public Download Count is disabled',
      'failed_message' => 'Public Download Count is enabled',
      'solved'         => ah_ready_module_check('pubdlcnt'),
      'fix_details'    => 'Disable the Public Download Count module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'purge_enabled_check' => array(
      'description'    => 'Purge (7.x-1.x) is not specifically incompatible, but can be difficult to set up correctly. We suggest using Acquia Purge instead. It is specifically intended for use on Acquia Cloud. Over time, these modules are planned to merge.',
      'solved_message' => 'Purge is disabled',
      'failed_message' => 'Purge is enabled',
      'solved'         => ah_ready_module_check('purge'),
      'fix_details'    => 'Disable the Purge module in favor of Acquia Purge.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'quicktabs_enabled_check' => array(
      'description'    => 'Quick Tabs loads content that a user does not immediately see, and creates additional links. This causes crawlers to visit pages 2-n times, which can impact site responsiveness.',
      'solved_message' => 'Quick Tabs is disabled',
      'failed_message' => 'Quick Tabs is enabled',
      'solved'         => ah_ready_module_check('quicktabs'),
      'fix_details'    => 'Disable the Quick Tabs module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'recaptcha_enabled_check' => array(
      'description'    => 'reCAPTCHA requires session cookies to be set, which prevents Varnish from caching pages.',
      'solved_message' => 'reCAPTCHA is disabled',
      'failed_message' => 'reCAPTCHA is enabled',
      'solved'         => ah_ready_module_check('recaptcha'),
      'fix_details'    => 'Disable the reCAPTCHA module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'role_memory_limit_enabled_check' => array(
      'description'    => 'Role Memory Limit overrides memory limit tuning, putting servers at risk of memory exhaustion. For more information see: https://docs.acquia.com/cloud/configure/environments/php#php-mem',
      'solved_message' => 'Role Memory Limit is disabled',
      'failed_message' => 'Role Memory Limit is enabled',
      'solved'         => ah_ready_module_check('role_memory_limit'),
      'fix_details'    => 'Disable the Role Memory Limit module. Open a Support ticket to learn options for setting safe memory limits.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'search404_enabled_check' => array(
      'description'    => 'Search 404 triggers a search for 404 Not Found responses. This module is best used with Fast 404 to prevent triggering a search for missing media assets.',
      'solved_message' => 'Search 404 is disabled',
      'failed_message' => 'Search 404 is enabled',
      'solved'         => ah_ready_module_check('search404'),
      'fix_details'    => 'Disable the Search 404 module or configure with Fast 404.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'session_api_enabled_check' => array(
      'description'    => 'Session API requires session cookies to be set, which prevents Varnish from caching pages. Additionally, Session API generates intense queries, causing major slowdowns.',
      'solved_message' => 'Session API is disabled',
      'failed_message' => 'Session API is enabled',
      'solved'         => ah_ready_module_check('session_api'),
      'fix_details'    => 'Disable the Session API module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'search_api_apachesolr_enabled_check' => array(
      'description'    => 'Acquia Cloud does support both Search API and Apache Solr Search, but using both concurrently is not recommended as a best practice.',
      'solved_message' => 'Search API and ApacheSolr Search are not both enabled',
      'failed_message' => 'Both Search API and ApacheSolr Search are enabled',
      'solved'         => ah_ready_concurrency_check(array('search_api', 'apachesolr')),
      'fix_details'    => 'Disable one of Search API or Apache Solr Search modules.',
      'category'       => 'best_practices',
      'severity'       => 16,
    ),
    'shib_auth_enabled_check' => array(
      'description'    => 'The Shibboleth authentication module is not supported on Acquia Cloud. For federated logins, the simpleSAMLphp library is recommended. For more information see: https://docs.acquia.com/articles/using-simplesamlphp-acquia-cloud-site',
      'solved_message' => 'Shibboleth authentication is disabled',
      'failed_message' => 'Shibboleth authentication is enabled',
      'solved'         => ah_ready_module_check('shib_auth'),
      'fix_details'    => 'Disable the Shibboleth authentication module and switch to simpleSAMLphp.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'simplesamlphp_auth_enabled_check' => array(
      'description'    => 'Installing simpleSAMLphp Authentication on Acquia Cloud requires special care. For more information see: https://docs.acquia.com/articles/using-simplesamlphp-acquia-cloud-site',
      'solved_message' => 'simpleSAMLphp Authentication is disabled',
      'failed_message' => 'simpleSAMLphp Authentication is enabled',
      'solved'         => ah_ready_module_check('simplesamlphp_auth'),
      'fix_details'    => 'Follow Acquia\'s documentation to properly install and configure simpleSAMLphp Authentication. For more information see: https://docs.acquia.com/articles/using-simplesamlphp-acquia-cloud-site',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'tcpdf_enabled_check' => array(
      'description'    => 'TCPDF should be configured with a symlink to private files.',
      'solved_message' => 'TCPDF is disabled',
      'failed_message' => 'TCPDF is enabled',
      'solved'         => ah_ready_module_check('tcpdf'),
      'fix_details'    => 'Disable the TCPDF module or ensure proper configuration on Acquia Cloud.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'textsize_enabled_check' => array(
      'description'    => 'Text Size requires session cookies to be set, which prevents Varnish from caching pages.',
      'solved_message' => 'Text Size is disabled',
      'failed_message' => 'Text Size is enabled',
      'solved'         => ah_ready_module_check('textsize'),
      'fix_details'    => 'Disable the Text Size module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'varnish_enabled_check' => array(
      'description'    => 'The Varnish contributed module does not work with Acquia Cloud because it requires connections to the load balancers, which Acquia does not provide. The Varnish caching provided by Acquia Cloud works out of the box with Pressflow (Drupal 6) or Drupal 7 sites with caching enabled.',
      'solved_message' => 'Varnish is disabled',
      'failed_message' => 'Varnish is enabled',
      'solved'         => ah_ready_module_check('varnish'),
      'fix_details'    => 'Disable the Varnish module.',
      'category'       => 'performance',
      'severity'       => 32,
    ),
    'workbench_moderation_enabled_check' => array(
      'description'    => 'Workbench Moderation does not work out of the box with ApacheSolr search integration. For more information see: https://docs.acquia.com/articles/workbench-moderation-can-cause-problems-apachesolr',
      'solved_message' => 'Workbench Moderation is disabled or dependencies are in place',
      'failed_message' => 'Workbench Moderation is enabled with Apache Solr Search but Apache Solr Workbench Moderation was not found',
      'solved'         => ah_ready_dependency_check(array('workbench_moderation', 'apachesolr'), array('apachesolr_workbench_moderation')),
      'fix_details'    => 'To use Workbench Moderation with ApacheSolr search integration, ensure the ApacheSolr Workbench Moderation module is installed.',
      'category'       => 'best_practices',
      'severity'       => 16,
    ),
    'wurfl_enabled_check' => array(
      'description'    => 'WURFL should be configured with a symlink to private files.',
      'solved_message' => 'WURFL is disabled',
      'failed_message' => 'WURFL is enabled',
      'solved'         => ah_ready_module_check('wurfl'),
      'fix_details'    => 'Disable the WURFL module or ensure proper configuration on Acquia Cloud.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'WYSIWYG-CKFinder_enabled_check' => array(
      'description'    => 'WYSIWYG CKFinder should be configured with a symlink to private files.',
      'solved_message' => 'WYSIWYG CKFinder is disabled',
      'failed_message' => 'WYSIWYG CKFinder is enabled',
      'solved'         => ah_ready_module_check('WYSIWYG-CKFinder'),
      'fix_details'    => 'Disable the WYSIWYG CKFinder module or ensure proper configuration on Acquia Cloud.',
      'category'       => 'best_practices',
      'severity'       => 32,
    ),
    'plupload_enabled_check' => array(
      'description'    => 'Plupload can fail on high availability server architecture. For a solution see: https://docs.acquia.com/articles/correcting-broken-uploads-plupload-acquia-cloud-enterprise',
      'solved_message' => 'Plupload is disabled or configured correctly',
      'failed_message' => 'Plupload is enabled without the recommended configuration',
      'solved'         => ah_ready_variable_check('plupload', 'plupload_temporary_uri', $plupload_var),
      'fix_details'    => 'Ensure Plupload is configured for Acquia Cloud Enterprise. For a solution see: https://docs.acquia.com/articles/correcting-broken-uploads-plupload-acquia-cloud-enterprise',
      'category'       => 'best_practices',
      'severity'       => 16,
    ),
    'domain_added_check' => array(
      'description'    => 'Domains should be added to the Acquia Network Dashboard in order to resolve on Acquia Cloud. For more information see: https://docs.acquia.com/cloud/configure/domains',
      'solved_message' => "Production domains have been added to Acquia Cloud",
      'failed_message' => "One or more production domains are not added to Acquia Cloud",
      'solved'         => $cloud_tests ? ah_ready_domain_check($domains) : true,
      'fix_details'    => 'Ensure your production domains have been added to Acquia Cloud. For more information see: https://docs.acquia.com/cloud/configure/domains',
      'category'       => 'best_practices',
      'severity'       => 64,
    ),
    'domain_ssl_check' => array(
      'description'    => 'It\'s recommended to cover domains with an SSL certificate. For more information see: https://docs.acquia.com/cloud/configure/https',
      'solved_message' => "Production domains are covered by SSL",
      'failed_message' => "One or more production domains are not covered by SSL",
      'solved'         => $cloud_tests ? ah_ready_ssl_check($domains) : true,
      'fix_details'    => 'Ensure your production domains are covered by SSL. For more information see: https://docs.acquia.com/cloud/configure/https',
      'category'       => 'security',
      'severity'       => 32,
    ),
  );
}

